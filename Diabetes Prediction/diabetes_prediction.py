# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPzL93DeI86-B79PT_8Y5cBoqjLYpadu

Importing the Dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection


PIMA Diabetes Dataset


"""

#loading the dataset to the padas datframe
diabetes_dataset=pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()



#getting the statiscal data
diabetes_dataset.describe()

diabetes_dataset.shape

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic

1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#Separating the data and the label
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

"""Data Standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X) #we can use scaler.fit_transform(X)

print(X)

X=standardized_data
print(X)
print(Y)

"""Train Test Split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)

print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score

"""

#accuracy score on training_data
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of training data',training_data_accuracy)

#accuracy score on testing_data
X_test_prediction=classifier.predict(X_test)
testing_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of tesing data',testing_data_accuracy)

"""Making a predictive system

"""

input_data=(8,95.532402, 29.162583, 81.156249, 56.677485, 66.327245, 33.954611, 87.509096)

#changing the input_data to a numpy_array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the array for one input
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#stand the data
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)

print(prediction)



